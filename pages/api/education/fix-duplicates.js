import dbConnect from "@/lib/dbConnect";
import EducationRegister from "@/models/EducationRegisterModel";

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ message: 'Method Not Allowed' });
  }

  try {
    await dbConnect();

    console.log('üîÑ Starting duplicate detection...');

    // 1. ‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£
    const duplicates = await EducationRegister.aggregate([
      {
        $group: {
          _id: {
            name: "$name",
            phone: "$phone"
          },
          count: { $sum: 1 },
          docs: { $push: "$$ROOT" }
        }
      },
      {
        $match: {
          count: { $gt: 1 }
        }
      }
    ]);

    console.log(`üìä Found ${duplicates.length} duplicate groups`);

    let deletedCount = 0;

    // 2. ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥ (‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏£‡∏Å‡πÑ‡∏ß‡πâ)
    for (const group of duplicates) {
      const docs = group.docs.sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt));
      
      // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠ (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏£‡∏Å)
      for (let i = 1; i < docs.length; i++) {
        await EducationRegister.findByIdAndDelete(docs[i]._id);
        deletedCount++;
      }
    }

    // 3. ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const totalCount = await EducationRegister.countDocuments();

    return res.status(200).json({
      message: '‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      results: {
        duplicateGroups: duplicates.length,
        deletedRecords: deletedCount
      },
      summary: {
        totalRecords: totalCount
      }
    });

  } catch (err) {
    console.error('‚ùå API error:', err);
    return res.status(500).json({ 
      message: 'Server error', 
      error: err.message
    });
  }
}
