// components/education/MapEducationPoints.js
import React, { useState, useMemo } from 'react';
import Image from 'next/image';
import { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';
import 'leaflet/dist/leaflet.css';
import L from 'leaflet';
import { FaMapMarkerAlt, FaSchool, FaUniversity, FaBaby, FaUserGraduate } from 'react-icons/fa';

// ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô marker icon ‡∏´‡∏≤‡∏¢‡πÉ‡∏ô‡∏ö‡∏≤‡∏á‡∏£‡∏∞‡∏ö‡∏ö
delete L.Icon.Default.prototype._getIconUrl;
L.Icon.Default.mergeOptions({
  iconRetinaUrl: '/leaflet/marker-icon-2x.png',
  iconUrl: '/leaflet/marker-icon.png',
  shadowUrl: '/leaflet/marker-shadow.png',
});

// ‡∏™‡∏£‡πâ‡∏≤‡∏á custom icons ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤
const createCustomIcon = (level) => {
  const colors = {
    '‡∏≠‡∏ô‡∏∏‡∏ö‡∏≤‡∏•': '#FF6B9D',
    '‡∏õ‡∏£‡∏∞‡∏ñ‡∏°': '#FF6B35',
    '‡∏°‡∏±‡∏ò‡∏¢‡∏°‡∏ï‡πâ‡∏ô': '#6BCF7F',
    '‡∏°‡∏±‡∏ò‡∏¢‡∏°‡∏õ‡∏•‡∏≤‡∏¢': '#4D96FF',
    '‡∏õ‡∏ß‡∏ä': '#9B59B6',
    '‡∏õ‡∏ß‡∏ä.': '#9B59B6',
    '‡∏õ‡∏ß‡∏™': '#E67E22',
    '‡∏õ‡∏ß‡∏™.': '#E67E22',
    '‡∏õ‡∏£‡∏¥‡∏ç‡∏ç‡∏≤‡∏ï‡∏£‡∏µ': '#E74C3C',
    '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏': '#95A5A6'
  };

  const color = colors[level] || colors['‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'];

  return L.divIcon({
    html: `
      <div style="
        background-color: ${color};
        width: 20px;
        height: 20px;
        border-radius: 50%;
        border: 3px solid white;
        box-shadow: 0 2px 4px rgba(0,0,0,0.3);
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 10px;
        font-weight: bold;
      ">
        ${level === '‡∏≠‡∏ô‡∏∏‡∏ö‡∏≤‡∏•' ? '‡∏≠' : 
          level === '‡∏õ‡∏£‡∏∞‡∏ñ‡∏°' ? '‡∏õ' :
          level === '‡∏°‡∏±‡∏ò‡∏¢‡∏°‡∏ï‡πâ‡∏ô' ? '‡∏°' :
          level === '‡∏°‡∏±‡∏ò‡∏¢‡∏°‡∏õ‡∏•‡∏≤‡∏¢' ? '‡∏°' :
          level === '‡∏õ‡∏ß‡∏ä' ? '‡∏ä' :
          level === '‡∏õ‡∏ß‡∏ä.' ? '‡∏ä' :
          level === '‡∏õ‡∏ß‡∏™' ? '‡∏™' :
          level === '‡∏õ‡∏ß‡∏™.' ? '‡∏™' :
          level === '‡∏õ‡∏£‡∏¥‡∏ç‡∏ç‡∏≤‡∏ï‡∏£‡∏µ' ? '‡∏ï' : '?'}
      </div>
    `,
    className: 'custom-marker',
    iconSize: [20, 20],
    iconAnchor: [10, 10]
  });
};

export default function MapEducationPoints({ data }) {
  const [selectedLevel, setSelectedLevel] = useState('all');
  const [hoveredPoint, setHoveredPoint] = useState(null);



  // ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤
  const groupedData = useMemo(() => {
    const groups = {};
    data.forEach(item => {
      const level = item.educationLevel || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
      if (!groups[level]) {
        groups[level] = [];
      }
      groups[level].push(item);
    });
    
    // Debug: ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß
    console.log('Grouped data:', groups);
    console.log('Available levels:', Object.keys(groups));
    
    return groups;
  }, [data]);

  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏∏‡∏î‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏•‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
  const center = useMemo(() => {
    if (data.length === 0) return [15.259, 100.349];
    
    const validPoints = data.filter(item => 
      item.location && 
      typeof item.location.lat === 'number' && 
      typeof item.location.lng === 'number'
    );
    
    if (validPoints.length === 0) return [15.259, 100.349];
    
    const avgLat = validPoints.reduce((sum, item) => sum + item.location.lat, 0) / validPoints.length;
    const avgLng = validPoints.reduce((sum, item) => sum + item.location.lng, 0) / validPoints.length;
    
    return [avgLat, avgLng];
  }, [data]);

  // ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
  const filteredData = useMemo(() => {
    if (selectedLevel === 'all') return data;
    return data.filter(item => (item.educationLevel || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏') === selectedLevel);
  }, [data, selectedLevel]);

  const levelColors = {
    '‡∏≠‡∏ô‡∏∏‡∏ö‡∏≤‡∏•': '#FF6B9D',
    '‡∏õ‡∏£‡∏∞‡∏ñ‡∏°': '#FF6B35',
    '‡∏°‡∏±‡∏ò‡∏¢‡∏°‡∏ï‡πâ‡∏ô': '#6BCF7F',
    '‡∏°‡∏±‡∏ò‡∏¢‡∏°‡∏õ‡∏•‡∏≤‡∏¢': '#4D96FF',
    '‡∏õ‡∏ß‡∏ä': '#9B59B6',
    '‡∏õ‡∏ß‡∏ä.': '#9B59B6',
    '‡∏õ‡∏ß‡∏™': '#E67E22',
    '‡∏õ‡∏ß‡∏™.': '#E67E22',
    '‡∏õ‡∏£‡∏¥‡∏ç‡∏ç‡∏≤‡∏ï‡∏£‡∏µ': '#E74C3C',
    '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏': '#95A5A6'
  };

  const levelIcons = {
    '‡∏≠‡∏ô‡∏∏‡∏ö‡∏≤‡∏•': <FaBaby />,
    '‡∏õ‡∏£‡∏∞‡∏ñ‡∏°': <FaSchool />,
    '‡∏°‡∏±‡∏ò‡∏¢‡∏°‡∏ï‡πâ‡∏ô': <FaSchool />,
    '‡∏°‡∏±‡∏ò‡∏¢‡∏°‡∏õ‡∏•‡∏≤‡∏¢': <FaSchool />,
    '‡∏õ‡∏ß‡∏ä': <FaUserGraduate />,
    '‡∏õ‡∏ß‡∏ä.': <FaUserGraduate />,
    '‡∏õ‡∏ß‡∏™': <FaUserGraduate />,
    '‡∏õ‡∏ß‡∏™.': <FaUserGraduate />,
    '‡∏õ‡∏£‡∏¥‡∏ç‡∏ç‡∏≤‡∏ï‡∏£‡∏µ': <FaUniversity />,
    '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏': <FaMapMarkerAlt />
  };


  return (
    <div className="space-y-4">
      {/* ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤ */}
      <div className="bg-white rounded-lg shadow-md p-4">
        <h3 className="text-lg font-semibold mb-3 text-gray-800">‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤</h3>
        <div className="flex flex-wrap gap-2">
          <button
            onClick={() => setSelectedLevel('all')}
            className={`px-4 py-2 rounded-full text-sm font-medium transition ${
              selectedLevel === 'all'
                ? 'bg-blue-500 text-white'
                : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
            }`}
          >
            ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ({data.length})
          </button>
          {Object.entries(groupedData).map(([level, items]) => {
            const icon = levelIcons[level] || <FaMapMarkerAlt />;
            console.log(`Level: ${level}, Icon:`, icon);
            
            return (
              <button
                key={level}
                onClick={() => setSelectedLevel(level)}
                className={`px-4 py-2 rounded-full text-sm font-medium transition flex items-center gap-2 ${
                  selectedLevel === level
                    ? 'text-white'
                    : 'text-gray-700 hover:bg-gray-100'
                }`}
                style={{
                  backgroundColor: selectedLevel === level ? levelColors[level] : 'transparent'
                }}
              >
                <span className="text-xs">{icon}</span>
                {level} ({items.length})
              </button>
            );
          })}
        </div>
      </div>

      {/* ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà */}
      <div className="bg-white rounded-lg shadow-md overflow-hidden">
        <MapContainer 
          center={center} 
          zoom={12} 
          style={{ height: '600px', width: '100%', zIndex: 0 }}
          className="rounded-lg"
        >
          <TileLayer
            url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
            attribution="¬© OpenStreetMap contributors"
          />
          
          {/* ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤ */}
          {filteredData.map((item, i) => {
            if (!item.location || !item.location.lat || !item.location.lng) return null;
            
            const level = item.educationLevel || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
            const icon = createCustomIcon(level);
            
            return (
              <Marker
                key={item._id || i}
                position={[item.location.lat, item.location.lng]}
                icon={icon}
                eventHandlers={{
                  mouseover: () => setHoveredPoint(item),
                  mouseout: () => setHoveredPoint(null)
                }}
              >
                <Popup>
                  <div className="min-w-[300px]">
                    {/* Header */}
                    <div className="mb-4">
                      <h3 className="text-lg font-semibold text-gray-800 mb-3">
                        {item.prefix || ''}{item.name}
                      </h3>
                    </div>
                    
                    {/* Information Section */}
                    <div className="space-y-2 text-sm">
                      <div className="flex items-center gap-2">
                        <span className="font-medium">üìö ‡∏£‡∏∞‡∏î‡∏±‡∏ö:</span>
                        <span className="px-2 py-1 rounded-full text-xs font-medium"
                              style={{ backgroundColor: levelColors[level] + '20', color: levelColors[level] }}>
                          {level}
                        </span>
                      </div>
                      
                      {item.phone && (
                        <div className="flex items-center gap-2">
                          <span className="font-medium">üìû:</span>
                          <span>{item.phone}</span>
                        </div>
                      )}
                      
                      {item.address && (
                        <div className="flex items-start gap-2">
                          <span className="font-medium">üè†:</span>
                          <span className="text-gray-600">{item.address}</span>
                        </div>
                      )}
                      
                      {item.note && (
                        <div className="flex items-start gap-2">
                          <span className="font-medium">üìù:</span>
                          <span className="text-gray-600">{item.note}</span>
                        </div>
                      )}
                    </div>

                    {/* Images Section */}
                    {item.imageUrl?.length > 0 && (
                      <div className="mt-3">
                        <div className="flex overflow-x-auto gap-2 pb-2">
                          {item.imageUrl.map((url, index) => (
                            <a
                              key={index}
                              href={url}
                              target="_blank"
                              rel="noopener noreferrer"
                              className="flex-shrink-0"
                            >
                              <Image
                                src={url}
                                alt={`${item.name || '‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô'} - ‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà ${index + 1}`}
                                width={80}
                                height={60}
                                className="rounded-md object-cover hover:opacity-80 transition"
                                onError={(e) => {
                                  e.target.style.display = 'none';
                                }}
                              />
                            </a>
                          ))}
                        </div>
                      </div>
                    )}
                  </div>
                </Popup>
              </Marker>
            );
          })}
        </MapContainer>
      </div>

      {/* ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏£‡∏∏‡∏õ */}
      <div className="bg-white rounded-lg shadow-md p-4">
        <h3 className="text-lg font-semibold mb-3 text-gray-800">‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•</h3>
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
          <div className="text-center">
            <div className="text-2xl font-bold text-blue-600">{filteredData.length}</div>
            <div className="text-sm text-gray-600">‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á</div>
          </div>
          <div className="text-center">
            <div className="text-2xl font-bold text-green-600">
              {filteredData.filter(item => item.location && item.location.lat && item.location.lng).length}
            </div>
            <div className="text-sm text-gray-600">‡∏°‡∏µ‡∏û‡∏¥‡∏Å‡∏±‡∏î</div>
          </div>
          <div className="text-center">
            <div className="text-2xl font-bold text-purple-600">
              {filteredData.filter(item => item.imageUrl?.length > 0).length}
            </div>
            <div className="text-sm text-gray-600">‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û</div>
          </div>
          <div className="text-center">
            <div className="text-2xl font-bold text-orange-600">
              {filteredData.filter(item => item.phone).length}
            </div>
            <div className="text-sm text-gray-600">‡∏°‡∏µ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£</div>
          </div>
        </div>
      </div>

      {/* ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà hover */}
      {hoveredPoint && (
        <div className="bg-white rounded-lg shadow-md p-4 border-l-4 border-blue-500">
          <h3 className="text-lg font-semibold mb-2 text-gray-800">
            ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: {hoveredPoint.prefix || ''}{hoveredPoint.name}
          </h3>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
            <div>
              <span className="font-medium">‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤:</span>
              <span className="ml-2 px-2 py-1 rounded-full text-xs font-medium"
                    style={{ backgroundColor: levelColors[hoveredPoint.educationLevel || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'] + '20', color: levelColors[hoveredPoint.educationLevel || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'] }}>
                {hoveredPoint.educationLevel || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}
              </span>
            </div>
            {hoveredPoint.phone && (
              <div>
                <span className="font-medium">‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£:</span>
                <span className="ml-2">{hoveredPoint.phone}</span>
              </div>
            )}
            {hoveredPoint.householdMembers && (
              <div>
                <span className="font-medium">‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô‡∏ö‡πâ‡∏≤‡∏ô:</span>
                <span className="ml-2">{hoveredPoint.householdMembers} ‡∏Ñ‡∏ô</span>
              </div>
            )}
          </div>
        </div>
      )}


    </div>
  );
}