import { useEffect, useState } from "react";
import Swal from "sweetalert2";
import Image from "next/image";

export default function RequestTable({ requests = [], menu = [], loading, onDelete, onUpdateStatus }) {
  const [delayPassed, setDelayPassed] = useState(false);

  useEffect(() => {
    if (loading) {
      const timer = setTimeout(() => setDelayPassed(true), 2000);
      return () => clearTimeout(timer);
    } else {
      setDelayPassed(false);
    }
  }, [loading]);

  if (loading && delayPassed) {
    return (
      <div className="overflow-x-auto mt-6">
        <h1 className="text-xl font-bold mb-4">‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡∏Ç‡∏≠‡∏Å‡∏≤‡∏¢‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå</h1>
        <table className="table table-sm w-full">
          <thead>
            <tr>
              <th>‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå</th>
              <th>‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•</th>
              <th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
              <th></th>
            </tr>
          </thead>
          <tbody>
            {[...Array(3)].map((_, i) => (
              <tr key={i}>
                <td><div className="skeleton h-4 w-24" /></td>
                <td><div className="skeleton h-4 w-24" /></td>
                <td><div className="skeleton h-4 w-20" /></td>
                <td><div className="skeleton h-4 w-16" /></td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    );
  }
  return (
    <div className="overflow-x-auto mt-6">
      <h1 className="text-xl font-bold mb-4">‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡∏Ç‡∏≠‡∏Å‡∏≤‡∏¢‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå</h1>
      <table className="table table-sm w-full">
        <thead>
          <tr>
            <th>#</th>
            <th>‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå</th>
            <th>‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•</th>
            <th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
            <th>‡∏™‡πà‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠</th>
            <th></th>
          </tr>
        </thead>
        <tbody>
          {requests.map((r, i) => (
            <tr key={r._id}>
              <th>{i + 1}</th>
              <td className="flex items-center gap-2">
                {(() => {
                  const item = menu.find((m) => m.label === r.equipment || m.shot_name === r.equipment);
                  return item?.image_icon ? (
                    <>
                      <Image src={item.image_icon} alt={r.equipment} width={24} height={24} className="object-contain" />
                      <span>{r.equipment}</span>
                    </>
                  ) : (
                    <span>{r.equipment}</span>
                  );
                })()}
              </td>
              <td>{r.reason}</td>
              <td>
                {(() => {
                  const status = r.status || "‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á";
                  const statusMap = {
                    "‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á": {
                      text: "‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á",
                      icon: "üü°",
                      className: "border border-yellow-400 text-yellow-600"
                    },
                    "‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÇ‡∏î‡∏¢‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏ß‡∏¥‡∏ä‡∏≤‡∏ä‡∏µ‡∏û": {
                      text: "‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÇ‡∏î‡∏¢‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏ß‡∏¥‡∏ä‡∏≤‡∏ä‡∏µ‡∏û",
                      icon: "ü©∫",
                      className: "border border-blue-400 text-blue-600"
                    },
                    "‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå": {
                      text: "‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå",
                      icon: "üìù",
                      className: "border border-orange-400 text-orange-600"
                    },
                    "‡∏™‡πà‡∏á‡∏°‡∏≠‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå": {
                      text: "‡∏™‡πà‡∏á‡∏°‡∏≠‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå",
                      icon: "üì¶",
                      className: "border border-green-400 text-green-600"
                    }
                  };
                  const s = statusMap[status] || {
                    text: status,
                    icon: "‚ÑπÔ∏è",
                    className: "border border-gray-400 text-gray-600"
                  };
                  return (
                    <div className={`rounded-lg px-4 py-2 text-sm flex items-center justify-center gap-2 ${s.className}`}>
                      <span>{s.icon}</span>
                      <span className="font-medium">{s.text}</span>
                    </div>
                  );
                })()}
              </td>
              <td>{new Date(r.submitted_at).toLocaleDateString("th-TH", {
                year: "numeric",
                month: "long",
                day: "numeric"
              })}</td>
              <td className="flex gap-1">
                <button
                  onClick={() =>
                    Swal.fire({
                      title: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
                      html: `
                        <div style="text-align:left">
                          <p><b>‡∏ä‡∏∑‡πà‡∏≠:</b> ${r.name}</p>
                          <p><b>‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£:</b> ${r.phone}</p>
                          <p><b>‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå:</b> ${r.equipment}</p>
                          <p><b>‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•:</b> ${r.reason}</p>
                          <p><b>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:</b> ${r.status || "‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á"}</p>
                          <p><b>‡∏™‡πà‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠:</b> ${new Date(r.submitted_at).toLocaleString()}</p>
                        </div>
                      `,
                    })
                  }
                  className="btn btn-sm btn-info"
                >
                  ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                </button>
                <button
                  onClick={async () => {
                    Swal.fire({
                      title: "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞",
                      html: `
                        <div style="margin-top: 1rem;">
                          <label for="statusSelect" style="display: block; margin-bottom: 0.5rem;">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡∏°‡πà</label>
                          <select id="statusSelect" class="swal2-input" style="width: 100%; padding: 0.5rem;">
                            <option value="‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á">‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á</option>
                            <option value="‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÇ‡∏î‡∏¢‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏ß‡∏¥‡∏ä‡∏≤‡∏ä‡∏µ‡∏û">‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÇ‡∏î‡∏¢‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏ß‡∏¥‡∏ä‡∏≤‡∏ä‡∏µ‡∏û</option>
                            <option value="‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå">‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå</option>
                            <option value="‡∏™‡πà‡∏á‡∏°‡∏≠‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå">‡∏™‡πà‡∏á‡∏°‡∏≠‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå</option>
                          </select>
                        </div>
                      `,
                      preConfirm: () => {
                        const selected = document.getElementById("statusSelect").value;
                        if (!selected) {
                          Swal.showValidationMessage("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞");
                        }
                        return selected;
                      },
                      showCancelButton: true,
                      confirmButtonText: "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å",
                      cancelButtonText: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
                    }).then((result) => {
                      if (result.isConfirmed && result.value && result.value !== r.status) {
                        if (onUpdateStatus) {
                          onUpdateStatus(r._id, result.value);
                        }
                        Swal.fire("‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", "success");
                      }
                    });
                  }}
                  className="btn btn-sm btn-warning"
                >
                  ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                </button>
                <button
                  onClick={() =>
                    Swal.fire({
                      title: "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö?",
                      text: "‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ?",
                      icon: "warning",
                      showCancelButton: true,
                      confirmButtonColor: "#d33",
                      cancelButtonColor: "#3085d6",
                      confirmButtonText: "‡πÉ‡∏ä‡πà, ‡∏•‡∏ö‡πÄ‡∏•‡∏¢",
                      cancelButtonText: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
                    }).then((result) => {
                      if (result.isConfirmed) {
                        onDelete(r._id);
                        Swal.fire("‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß!", "‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", "success");
                      }
                    })
                  }
                  className="btn btn-sm btn-error"
                >
                  ‡∏•‡∏ö
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}