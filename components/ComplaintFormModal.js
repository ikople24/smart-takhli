import React, { useState, useEffect, useRef } from 'react';
import dynamic from 'next/dynamic';
import CommunitySelector from './CommunitySelector';
import ReporterInput from './ReporterInput';

import { useProblemOptionStore } from '@/stores/useProblemOptionStore';
import ImageUploads from './ImageUploads';
import Swal from 'sweetalert2';
import { z } from 'zod';
import Image from 'next/image';
const LocationConfirm = dynamic(() => import('./LocationConfirm'), { ssr: false });

const complaintFormSchema = z.object({
  community: z.string().min(1, '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ 1 ‡∏ä‡∏∏‡∏°‡∏ä‡∏ô'),
  prefix: z.string().min(1, '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤'),
  fullName: z.string().min(2, '‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 2 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£'),
  phone: z.string().length(10, '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ 10 ‡∏´‡∏•‡∏±‡∏Å'),
  detail: z.string().min(1, '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î'),
  imageUrls: z.array(z.string()).min(1, '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏£‡∏π‡∏õ'),
  location: z.object({
    lat: z.number(),
    lng: z.number(),
  }).nullable().refine((val) => val !== null, '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á'),
  selectedProblems: z.array(z.string()).min(1, '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£'),
});

const ComplaintFormModal = ({ selectedLabel, onClose }) => {
  const [selectedCommunity, setSelectedCommunity] = useState('');
  const [prefix, setPrefix] = useState('‡∏ô‡∏≤‡∏¢');
  const [fullName, setFullName] = useState('');
  const [phone, setPhone] = useState('');
  const [detail, setDetail] = useState('');
  const [imageUrls, setImageUrls] = useState([]);
  const [useCurrentLocation, setUseCurrentLocation] = useState(false);
  const [location, setLocation] = useState(null);
  const [selectedProblems, setSelectedProblems] = useState([]);
  const [validateTrigger, setValidateTrigger] = useState(false);
  const [formErrors, setFormErrors] = useState({});
  const reporterValidRef = useRef(true);
  const [isSubmitting, setIsSubmitting] = useState(false);

  const { problemOptions, fetchProblemOptions } = useProblemOptionStore();

useEffect(() => {
    fetchProblemOptions();
  }, [fetchProblemOptions]);

  const handleSubmit = async (e) => {
    e.preventDefault();

    // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏ã‡πâ‡∏≥
    if (isSubmitting) {
      return;
    }

    setValidateTrigger(true);
    await new Promise((resolve) => setTimeout(resolve, 0)); // allow validation effect to run

    // Validation ‡∏î‡πâ‡∏ß‡∏¢ Zod
    const dataToValidate = {
      community: selectedCommunity,
      prefix,
      fullName: fullName.trim(),
      phone,
      detail: detail.trim(),
      imageUrls,
      location,
      selectedProblems,
    };

    const result = complaintFormSchema.safeParse(dataToValidate);
    if (!result.success) {
      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö error ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
      const errorOrder = [
        'community',
        'fullName', 
        'phone',
        'detail',
        'imageUrls',
        'location',
        'selectedProblems',
        'prefix'
      ];
      
      const sortedErrors = result.error.errors.sort((a, b) => {
        const aIndex = errorOrder.indexOf(a.path[0]);
        const bIndex = errorOrder.indexOf(b.path[0]);
        return aIndex - bIndex;
      });
      
      const errorMessages = sortedErrors.map((err, index) => `${index + 1}. ${err.message}`).join('\n');
      await Swal.fire({
        icon: 'warning',
        title: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô',
        text: errorMessages,
        confirmButtonText: '‡∏ï‡∏Å‡∏•‡∏á'
      });
      return;
    }

    setFormErrors({});

    setIsSubmitting(true);

    // NOTE: complaintId will be generated by the backend
    const payload = {
      prefix,
      fullName,
      phone,
      community: selectedCommunity,
      problems: selectedProblems.map(id => {
        const match = problemOptions.find(opt => opt._id === id);
        return match ? match.label : id;
      }),
      category: selectedLabel,
      images: imageUrls,
      detail,
      location,
      status: '‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£',
      officer: '',
      updatedAt: new Date(),
    };

    console.log("üì§ Payload ‡∏™‡πà‡∏á‡πÑ‡∏õ backend:", payload);

    try {
      const res = await fetch('/api/submittedreports/submit-report', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'x-app-id': process.env.NEXT_PUBLIC_APP_ID || 'app_b',
        },
        body: JSON.stringify(payload),
      });
      if (!res.ok) throw new Error('‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');

      const data = await res.json();
      const complaintId = data.complaintId;

      await Swal.fire({
        icon: 'success',
        title: '‡∏™‡πà‡∏á‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        html: `‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ <strong>${complaintId}</strong>`,
        confirmButtonText: '‡∏ï‡∏Å‡∏•‡∏á',
      });
      handleClearForm();
      onClose?.(); // Close the modal
    } catch (err) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', err);
      await Swal.fire({
        icon: 'error',
        title: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
        text: err.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ',
        confirmButtonText: '‡∏ï‡∏Å‡∏•‡∏á',
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleClearForm = () => {
    setSelectedCommunity('');
    setPrefix('‡∏ô‡∏≤‡∏¢');
    setFullName('');
    setPhone('');
    setDetail('');
    setImageUrls([]); // Explicitly clear imageUrls
    setUseCurrentLocation(false);
    setLocation(null);
    setSelectedProblems([]);
    setValidateTrigger(false);
    setFormErrors({});
    reporterValidRef.current = true;
  };

  const handleCommunitySelect = (community) => {
    setSelectedCommunity(community);
  };

  useEffect(() => {
  import('leaflet').then(L => {
    delete L.Icon.Default.prototype._getIconUrl;
    L.Icon.Default.mergeOptions({
      iconRetinaUrl: '/leaflet/marker-icon-2x.png',
      iconUrl: '/leaflet/marker-icon.png',
      shadowUrl: '/leaflet/marker-shadow.png',
    });
  });
}, []);

  if (!selectedLabel) return null;

  return (
    <div className="fixed inset-0 z-50 bg-black/30 overflow-y-auto flex items-center justify-center transition-all">
      <div className="bg-white rounded-lg shadow-lg p-6 w-full max-w-md max-h-[90vh] overflow-y-auto transform transition-all duration-300 opacity-0 scale-95 animate-fade-in">
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-base font-semibold text-gray-800">
            ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: {selectedLabel}
          </h2>
          <button
            onClick={onClose}
            className="text-gray-500 hover:text-gray-800 text-sm"
          >
            ‚úï
          </button>
        </div>
        <form onSubmit={handleSubmit} className="space-y-3">
          <CommunitySelector
            selected={selectedCommunity}
            onSelect={handleCommunitySelect}
            error={formErrors.community?.[0]}
          />
          <div>
            <p className="font-semibold text-sm text-gray-700">2.‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏õ‡∏±‡∏ç‡∏´‡∏≤</p>
            <div className="flex flex-wrap gap-2 mt-2">
              {problemOptions
                .filter(option => option.category === selectedLabel)
                .map(option => (
                  <button
                    key={option._id}
                    type="button"
                    className={`inline-flex items-center gap-2 px-3 py-1 rounded-full border whitespace-nowrap ${selectedProblems.includes(option._id) ? 'bg-blue-100 text-black border-blue-300' : 'border-gray-300 text-black hover:bg-gray-100'}`}
                    onClick={() => {
                      setSelectedProblems(prev =>
                        prev.includes(option._id)
                          ? prev.filter(id => id !== option._id)
                          : [...prev, option._id]
                      );
                    }}
                  >
                    <div className="flex items-center gap-2">
                      <Image
                        src={option.iconUrl}
                        alt={option.label}
                        width={20}
                        height={20}
                        className="w-5 h-5"
                      />
                      <span>{option.label}</span>
                    </div>
                  </button>
                ))}
            </div>
          </div>
          <p className="font-semibold text-sm text-gray-700">3.‡πÅ‡∏ô‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û üìÅ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 3 ‡∏†‡∏≤‡∏û)</p>
          <ImageUploads onChange={(urls) => setImageUrls(urls)} />
          <ReporterInput
            prefix={prefix}
            setPrefix={setPrefix}
            fullName={fullName}
            setFullName={setFullName}
            phone={phone}
            setPhone={setPhone}
            detail={detail}
            setDetail={setDetail}
            validateTrigger={validateTrigger}
            setValid={(v) => reporterValidRef.current = v}
          />
          <LocationConfirm
            useCurrent={useCurrentLocation}
            onToggle={setUseCurrentLocation}
            location={location}
            setLocation={setLocation}
          />
        <div className="flex mb-4 gap-2 justify-end">
          <button
            type="button"
            onClick={handleClearForm}
            className="btn btn-outline btn-warning"
          >
            ‡∏•‡πâ‡∏≤‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°
          </button>
          <button type="submit" className="btn btn-info" disabled={isSubmitting}>
            {isSubmitting && <span className="loading loading-infinity loading-xs mr-2" />}
            ‡∏™‡πà‡∏á‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á
          </button>
        </div>
        </form>
      </div>
    </div>
  );
};

export default ComplaintFormModal;